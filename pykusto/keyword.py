from enum import Enum


# noinspection SpellCheckingInspection
class Keyword(Enum):
    ABS = 'abs'
    ACCUMULATE = 'accumulate'
    ACOS = 'acos'
    AGO = 'ago'
    AND = 'and'
    ANOMALYCHART = 'anomalychart'
    ANOMALYCOLUMNS = 'anomalycolumns'
    AREACHART = 'areachart'
    ARRAY_CONCAT = 'array_concat'
    ARRAY_IIF = 'array_iif'
    ARRAY_INDEX_OF = 'array_index_of'
    ARRAY_LENGTH = 'array_length'
    ARRAY_ROTATE_LEFT = 'array_rotate_left'
    ARRAY_ROTATE_RIGHT = 'array_rotate_right'
    ARRAY_SHIFT_LEFT = 'array_shift_left'
    ARRAY_SHIFT_RIGHT = 'array_shift_right'
    ARRAY_SLICE = 'array_slice'
    ARRAY_SPLIT = 'array_split'
    AVG = 'avg'
    AVGIF = 'avgif'
    AXES = 'axes'
    BAG_KEYS = 'bag_keys'
    BARCHART = 'barchart'
    BIN = 'bin'
    BIN_AT = 'bin_at'
    BIN_AUTO = 'bin_auto'
    CARD = 'card'
    CASE = 'case'
    CEILING = 'ceiling'
    COLUMNCHART = 'columnchart'
    CONTAINS = 'contains'
    COS = 'cos'
    COUNTIF = 'countif'
    COUNTOF = 'countof'
    DATETIME = 'datetime'
    DCOUNT = 'dcount'
    DCOUNT_HLL = 'dcount_hll'
    DCOUNTIF = 'dcountif'
    DYNAMIC = 'dynamic'
    ENDOFDAY = 'endofday'
    ENDOFMONTH = 'endofmonth'
    ENDOFWEEK = 'endofweek'
    ENDOFYEAR = 'endofyear'
    ENDSWITH = 'endswith'
    EXP = 'exp'
    FALSE = 'false'
    FLOOR = 'floor'
    FORMAT_DATETIME = 'format_datetime'
    FORMAT_TIMESPAN = 'format_timespan'
    GETMONTH = 'getmonth'
    GETTYPE = 'gettype'
    GETYEAR = 'getyear'
    HASH = 'hash'
    HOUROFDAY = 'hourofday'
    IFF = 'iff'
    IIF = 'iif'
    IN = 'in'
    ISEMPTY = 'isempty'
    ISFINITE = 'isfinite'
    ISINF = 'isinf'
    ISNAN = 'isnan'
    ISNOTEMPTY = 'isnotempty'
    ISNOTNULL = 'isnotnull'
    ISNULL = 'isnull'
    KIND = 'kind'
    LADDERCHART = 'ladderchart'
    LEGEND = 'legend'
    LINECHART = 'linechart'
    LOG = 'log'
    LOGGAMMA = 'loggamma'
    MAKE_BAG = 'make_bag'
    MAKE_DATETIME = 'make_datetime'
    MAKE_LIST = 'make_list'
    MAKE_SET = 'make_set'
    MATCHES = 'matches'
    MAX = 'max'
    MAXIF = 'maxif'
    MIN = 'min'
    MINIF = 'minif'
    NONE = 'none'
    NOT = 'not'
    NOW = 'now'
    OR = 'or'
    PACK = 'pack'
    PACK_ARRAY = 'pack_array'
    PANELS = 'panels'
    PARSE_JSON = 'parse_json'
    PERCENTILES = 'percentiles'
    PIECHART = 'piechart'
    PIVOTCHART = 'pivotchart'
    POW = 'pow'
    REGEX = 'regex'
    ROUND = 'round'
    SCATTERCHART = 'scatterchart'
    SERIES = 'series'
    SET_DIFFERENCE = 'set_difference'
    SET_HAS_ELEMENT = 'set_has_element'
    SET_INTERSECT = 'set_intersect'
    SET_UNION = 'set_union'
    SIGN = 'sign'
    SPLIT = 'split'
    SQRT = 'sqrt'
    STACKED = 'stacked'
    STACKED100 = 'stacked100'
    STACKEDAREACHART = 'stackedareachart'
    STARTOFDAY = 'startofday'
    STARTOFMONTH = 'startofmonth'
    STARTOFWEEK = 'startofweek'
    STARTOFYEAR = 'startofyear'
    STARTSWITH = 'startswith'
    STDEV = 'stdev'
    STDEVIF = 'stdevif'
    STDEVP = 'stdevp'
    STRCAT_ARRAY = 'strcat_array'
    STRCAT_DELIM = 'strcat_delim'
    STRCMP = 'strcmp'
    STRING_SIZE = 'string_size'
    STRLEN = 'strlen'
    STRREP = 'strrep'
    SUBSTRING = 'substring'
    SUM = 'sum'
    SUMIF = 'sumif'
    TABLE = 'table'
    TIME = 'time'
    TIMECHART = 'timechart'
    TIMEPIVOT = 'timepivot'
    TITLE = 'title'
    TOBOOL = 'tobool'
    TODATETIME = 'todatetime'
    TOHEX = 'tohex'
    TOINT = 'toint'
    TOLONG = 'tolong'
    TOLOWER = 'tolower'
    TOSTRING = 'tostring'
    TOUPPER = 'toupper'
    TRUE = 'true'
    UNSTACKED = 'unstacked'
    VARIANCE = 'variance'
    VARIANCEIF = 'varianceif'
    VARIANCEP = 'variancep'
    XAXIS = 'xaxis'
    XCOLUMN = 'xcolumn'
    XTITLE = 'xtitle'
    YAXIS = 'yaxis'
    YCOLUMNS = 'ycolumns'
    YMAX = 'ymax'
    YMIN = 'ymin'
    YSPLIT = 'ysplit'
    YTITLE = 'ytitle'

    @staticmethod
    def check(value: str) -> bool:
        # noinspection PyProtectedMember
        return value in Keyword._value2member_map_

    @staticmethod
    def assert_sorted() -> None:
        last_value = ''
        for keyword in Keyword:
            current_value = keyword.value()
            assert current_value > last_value, f"Out of place: {current_value}"
            last_value = current_value


Keyword.assert_sorted()
